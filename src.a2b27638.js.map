{"version":3,"sources":["src/index.js"],"names":["app","Elm","Main","init","node","document","querySelector","ports","decodeImage","subscribe","uri","canvas","createElement","context","getContext","image","Image","src","decode","then","width","height","drawImage","imageData","getImageData","data","y","x","slice","r","g","b","push","imageDecoded","send","catch","err","message"],"mappings":";;AAAA;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,UAAIC,IAAJ,CAASC,IAAT,CAAc;AAAEC,EAAAA,IAAI,EAAEC,QAAQ,CAACC,aAAT,CAAuB,MAAvB;AAAR,CAAd,CAAZ;;AAEAN,GAAG,CAACO,KAAJ,CAAUC,WAAV,CAAsBC,SAAtB,CAAgC,UAAAC,GAAG,EAAI;AACrC,MAAMC,MAAM,GAAGN,QAAQ,CAACO,aAAT,CAAuB,QAAvB,CAAf;AACA,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB;AACA,MAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,GAAN,GAAYP,GAAZ;AACAK,EAAAA,KAAK,CACFG,MADH,GAEGC,IAFH,CAEQ,YAAM;AAAA,QACFC,KADE,GACgBL,KADhB,CACFK,KADE;AAAA,QACKC,MADL,GACgBN,KADhB,CACKM,MADL;AAEVV,IAAAA,MAAM,CAACS,KAAP,GAAeA,KAAf;AACAT,IAAAA,MAAM,CAACU,MAAP,GAAgBA,MAAhB;AACAR,IAAAA,OAAO,CAACS,SAAR,CAAkBP,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BK,KAA/B,EAAsCC,MAAtC;AACA,QAAME,SAAS,GAAGV,OAAO,CAACW,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2BJ,KAA3B,EAAkCC,MAAlC,CAAlB;AACA,QAAMI,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAApB,EAA4B,EAAEK,CAA9B,EAAiC;AAC/B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAApB,EAA2B,EAAEO,CAA7B,EAAgC;AAAA,oCACZJ,SAAS,CAACE,IAAV,CAAeG,KAAf,CAAqB,CAACD,CAAC,GAAGD,CAAC,GAAGN,KAAT,IAAkB,CAAvC,CADY;AAAA;AAAA,YACvBS,CADuB;AAAA,YACpBC,CADoB;AAAA,YACjBC,CADiB;;AAE9BN,QAAAA,IAAI,CAACO,IAAL,CAAU;AAAEL,UAAAA,CAAC,EAADA,CAAF;AAAKD,UAAAA,CAAC,EAADA,CAAL;AAAQG,UAAAA,CAAC,EAADA,CAAR;AAAWC,UAAAA,CAAC,EAADA,CAAX;AAAcC,UAAAA,CAAC,EAADA;AAAd,SAAV;AACD;AACF;;AACD/B,IAAAA,GAAG,CAACO,KAAJ,CAAU0B,YAAV,CAAuBC,IAAvB,CAA4B;AAAEd,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,MAAM,EAANA,MAAT;AAAiBI,MAAAA,IAAI,EAAJA;AAAjB,KAA5B;AACD,GAhBH,EAiBGU,KAjBH,CAiBS,UAAAC,GAAG;AAAA,WAAIpC,GAAG,CAACO,KAAJ,CAAU0B,YAAV,CAAuBC,IAAvB,CAA4BE,GAAG,CAACC,OAAhC,CAAJ;AAAA,GAjBZ;AAkBD,CAvBD,GAyBA","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["import { Elm } from \"./Main.elm\";\n\nconst app = Elm.Main.init({ node: document.querySelector(\"main\") });\n\napp.ports.decodeImage.subscribe(uri => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  const image = new Image();\n  image.src = uri;\n  image\n    .decode()\n    .then(() => {\n      const { width, height } = image;\n      canvas.width = width;\n      canvas.height = height;\n      context.drawImage(image, 0, 0, width, height);\n      const imageData = context.getImageData(0, 0, width, height);\n      const data = [];\n      for (let y = 0; y < height; ++y) {\n        for (let x = 0; x < width; ++x) {\n          const [r, g, b] = imageData.data.slice((x + y * width) * 4);\n          data.push({ x, y, r, g, b });\n        }\n      }\n      app.ports.imageDecoded.send({ width, height, data });\n    })\n    .catch(err => app.ports.imageDecoded.send(err.message));\n});\n\n// vim: set ts=2 sw=2 et:\n"]}